module arden.plugin.editor.GenerateArdenSyntax

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

var rootPath = ".."
var baseName = "arden.plugin.editor"
Workflow {
	
	component = XtextGenerator {
		configuration = {
			project = StandardProjectConfig {
				baseName = baseName
				rootPath = rootPath
				runtimeTest = {
					enabled = true
				}
				eclipsePlugin = {
					enabled = true
				}
				genericIde = {
				    // we are only interested in the eclipse plugin so put
				    // generic IDE stuff into the eclipse plugin project
				    name = "${baseName}.ui"
				}
				createEclipseMetaData = true
			}
			code = {
				encoding = "UTF-8"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
				preferXtendStubs = false // generate java stubs
			}
		}
		language = XtextGeneratorLanguage {
			name = "arden.plugin.editor.ArdenSyntax"
			fileExtensions = "mlm"

            fragment = parser.antlr.XtextAntlrGeneratorFragment2 {
                options = {
                    backtrack = true
                    ignoreCase = true
                    classSplitting = true
                }
            }
		    fragment = grammarAccess.GrammarAccessFragment2 {}
            fragment = resourceFactory.ResourceFactoryFragment2 {}
            fragment = ecore.EMFGeneratorFragment2 {}
            
            fragment = serializer.SerializerFragment2 { generateStub = false }
            fragment = validation.ValidatorFragment2 { generateStub = true }
            fragment = scoping.ImportNamespacesScopingFragment2 { ignoreCase = true }
            fragment = exporting.QualifiedNamesFragment2 {}
            fragment = builder.BuilderIntegrationFragment2 {}
            fragment = generator.GeneratorFragment2 { generateStub = false }
            fragment = formatting.Formatter2Fragment2 {
                generateStub = true
                generateXtendStub = true // formatter2 only supports xtend
            }
            
            fragment = ui.labeling.LabelProviderFragment2 {}
            fragment = ui.outline.QuickOutlineFragment2 {}
            fragment = ui.outline.OutlineTreeProviderFragment2 {}
            fragment = ui.quickfix.QuickfixProviderFragment2 {}
            fragment = ui.contentAssist.ContentAssistFragment2 {}
            fragment = ui.templates.CodetemplatesGeneratorFragment2 {}
            fragment = ui.refactoring.RefactorElementNameFragment2 {}
            fragment = ui.compare.CompareFragment2 {}
            
            fragment = junit.Junit4Fragment2 {}
            
            fragment = types.TypesGeneratorFragment2 {}
            fragment = xbase.XtypeGeneratorFragment2 {}
            fragment = xbase.XbaseGeneratorFragment2 {}
            
            //fragment = idea.parser.antlr.XtextAntlrIDEAGeneratorFragment {}
            //fragment = idea.IdeaPluginGenerator {}
            //fragment = web.WebIntegrationFragment {framework = "Ace"}
		}
	}
}
