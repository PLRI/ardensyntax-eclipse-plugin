/*
 * generated by Xtext 2.10.0
 */
package arden.plugin.editor.validation;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.xtext.validation.Check;

import arden.plugin.editor.ardenSyntax.ArdenSyntaxPackage;
import arden.plugin.editor.ardenSyntax.identifier;
import arden.plugin.editor.ardenSyntax.institution_slot;
import arden.plugin.editor.ardenSyntax.mlmname_slot;
import arden.plugin.editor.ardenSyntax.priority_slot;
import arden.plugin.editor.ardenSyntax.urgency_slot;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class ArdenSyntaxValidator extends AbstractArdenSyntaxValidator {
	
	@Check
	public void checkUrgencyRange(urgency_slot urgency_slot) {
		String urgency = urgency_slot.getUrgency().getValue();
		if(urgency != null) {
			double urgency_double = Double.valueOf(urgency);
			if(urgency_double<1 || urgency_double>99) {
				warning("Urgency should be between 1 and 99", ArdenSyntaxPackage.Literals.URGENCY_SLOT__URGENCY);
			}
		}
	}
	
	@Check
	public void checkPriorityRange(priority_slot priority_slot) {
		String priority = priority_slot.getPriority();
		try {
			double priority_double = Double.valueOf(priority);
			if(priority_double<1 || priority_double>99) {
				warning("Priority should be between 1 and 99", ArdenSyntaxPackage.Literals.PRIORITY_SLOT__PRIORITY);
			}
		} catch (NumberFormatException e) {
			error("Priority must be a number", ArdenSyntaxPackage.Literals.PRIORITY_SLOT__PRIORITY);
		}
	}
	
	@Check
	public void checkIdentifierName(identifier identifier) {
		String name = identifier.getName();
		
		if(RESERVED_KEYWORDS.contains(name.toLowerCase())) {
			error("<"+name+"> is reserved and may not be used as a variable name", ArdenSyntaxPackage.Literals.IDENTIFIER__NAME);
		}
	}
	private static final Set<String> RESERVED_KEYWORDS = new HashSet<String>(Arrays.asList( "Abs", "action", "after", "ago", "alert", "all", "and", "any", "arccos", "arcsin",
			"arctan", "arden", "are", "argument", "as", "at", "attribute", "author", "average", "avg", "be",
			"before", "Boolean", "call", "ceiling", "characters", "citations", "conclude", "cos", "cosine", "count",
			"clone", "currenttime", "data", "data_driven", "data-driven", "date", "day", "days", "decrease",
			"delay", "destination", "do", "duration", "earliest", "else", "elseif", "enddo", "endif", "end", "eq",
			"equal", "event", "eventtime", "every", "evoke", "exist", "exists", "exp", "expired", "explanation",
			"extract", "false", "filename", "find", "first", "floor", "following", "for", "formatted", "from", "ge",
			"greater", "gt", "hour", "hours", "if", "in", "include", "increase", "index", "institution", "int",
			"interface", "interval", "is", "it", "keywords", "knowledge", "last", "latest", "le", "left", "length",
			"less", "let", "library", "links", "list", "log", "log10", "logic", "lowercase", "lt", "maintenance",
			"matches", "max", "maximum", "median", "merge", "message", "min", "minimum", "minute", "minutes", "mlm",
			"mlmname", "mlm_self", "month", "months", "names", "ne", "nearest", "new", "no", "not", "now", "null",
			"number", "object", "occur", "occurred", "occurs", "of", "or", "past", "pattern", "percent",
			"preceding", "present", "priority", "production", "purpose", "read", "refute", "research", "return",
			"reverse", "right", "round", "same", "second", "seconds", "seqto", "sin", "sine", "slope", "sort",
			"specialist", "sqrt", "starting", "stddev", "string", "substring", "sum", "support", "surrounding",
			"tan", "tangent", "testing", "than", "the", "then", "they", "time", "title", "to", "triggertime",
			"trim", "true", "truncate", "type", "unique", "until", "uppercase", "urgency", "validation", "variance",
			"version", "was", "week", "weeks", "were", "where", "while", "with", "within", "write", "year",
			"years" ));
	
	@Check
	public void checkIdentifierLength(identifier identifier) {
		String name = identifier.getName();
		if(name.length() > 80) {
			lengthWarning("Identifier", name.length(), ArdenSyntaxPackage.Literals.IDENTIFIER__NAME);
		}
	}
	
	@Check
	public void checkInsitutionLength(institution_slot institution_slot) {
		String institution = institution_slot.getInstitution();
		if(institution.length() > 80) {
			lengthWarning("Insitution", institution.length(), ArdenSyntaxPackage.Literals.INSTITUTION_SLOT__INSTITUTION);
		}
	}
	
	@Check
	public void checkMlmnameLength(mlmname_slot mlmname_slot) {
		String mlmname = mlmname_slot.getMlmname();
		String filename = mlmname_slot.getFilename();
		if(mlmname != null && mlmname.length() > 80) {
			lengthWarning("Mlmname", mlmname.length(), ArdenSyntaxPackage.Literals.MLMNAME_SLOT__MLMNAME);
		} else if (filename != null && filename.length() > 80) {
			lengthWarning("Filename", filename.length(), ArdenSyntaxPackage.Literals.MLMNAME_SLOT__FILENAME);
		}
	}
	
	private void lengthWarning(String slotname, int length, EStructuralFeature feature) {
		warning(slotname + " is " + length + " characters long, but should only be up to 80 characters in length.", feature);
	}

}
